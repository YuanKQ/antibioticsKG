<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    Mybatis的mapper的namespace应该是对应的dao接口, xml文件当中每一个语句的id都对应dao接口当中的一个方法名,
    Mybatis会在运行时自动为dao接口生成动态代理的实例 org.apache.ibatis.binding.MapperProxy
    因此称为namespace
-->
<mapper namespace="com.iaso.antibiotic.dao.AntibioticDao">
    <!--
    *** 将数据查询结果映射成JavaBean
    *** id 数据库中主键映射
    *** column表示sql查询返回的列名
    *** property表示JavaBean中属性名
    *** dbcType表示数据库字段类型
    -->
    <resultMap id="AntibioticResult" type="com.iaso.antibiotic.model.Antibiotic">
        <id column="antibiotic_id" jdbcType="VARCHAR" property="id"/>
        <result column="antibiotic_name" jdbcType="VARCHAR" property="name"/>
        <result column="antibiotic_type" jdbcType="VARCHAR" property="type"/>
        <result column="description" jdbcType="LONGVARCHAR" property="description"/>
        <result column="drug_indication" jdbcType="LONGVARCHAR" property="drug_indication"/>
    </resultMap>
    <!--
    *** 根据姓名获取对应的值
    *** parameterType是参数类型，可以是基本类型，也可是JavaBean类型
    *** resultMap表示使用定义的哪个映射关系将结果集合转换为JavaBean
    *** 如果返回的是基本数据类型，就不用resultMap，直接使用resultType指定返回数据类型
    *** 如果没有返回结果，resultMap和resultType都不需要
    -->
    <select id="findAntibioticByName" resultMap="AntibioticResult">
        select * from antibiotic where antibiotic_name = #{name} LIMIT 1
    </select>

    <select id="findAllAntibioticName" resultType="String">
        select antibiotic_name from antibiotic LIMIT 60
    </select>

    <select id="findAllrelationName" resultType="String">
        select relation_name from relation LIMIT 50
    </select>





    <select id="findAntibioticByID" parameterType="map" resultMap="AntibioticResult">
        SELECT * FROM antibiotic WHERE antibiotic_id IN
        <foreach collection="list" index="index" item="item" open="(" separator="," close=")" >
            #{item}
        </foreach>
    </select>

    <!--
    *** 查询与Ａｎｔｉｂｉｏｔｉｃ相关的所有的节点
    *** 返回类型为List<String>, 主要体现在AntibioticDao.findAllNodeID的返回类型
    -->
    <select id="findAllNodeID" parameterType="String" resultType="String">
        SELECT target FROM edge_in_KG WHERE source = #{researching_id}
        UNION
        SELECT source FROM edge_in_KG WHERE target = #{researching_id}
    </select>

    <select id="findDBNameByKeyword" parameterType="String" resultType="int">
        SELECT db_No FROM antibioticKG_index WHERE keyword = #{name}
    </select>

    <select id="findEdgeByNodeIds" resultType="String">
        SELECT relation_id FROM edge_in_KG WHERE source = #{head} AND target = #{tail}
        UNION
        SELECT relation_id FROM edge_in_KG WHERE source = #{tail} AND target = #{head}
    </select>

    <!--
    <select id="findRelationNameById" parameterType="String" resultType="String">
        SELECT relation_name FROM relation WHERE relation_id = #{relation_id}
    </select>
    -->

    <!--
    KGRelationtion: antibiotic-bacteria
    *** 参数类型：List<String>
    *** 返回类型：List<Bacteria>
    -->
    <!--    <resultMap id="BacteriaResult" type="com.iaso.antibiotic.model.Bacteria">
            <id column="bacteria_id" jdbcType="VARCHAR" property="bacteriaId" />
            <result column="bacteria_name" jdbcType="VARCHAR" property="bacteriaName" />
            <result column="bacteria_type" jdbcType="VARCHAR" property="bacteriaType" />
        </resultMap>
        <resultMap extends="BacteriaResult" id="ResultMapWithBLOBs" type="com.iaso.antibiotic.model.Bacteria">
            <result column="description" jdbcType="LONGVARCHAR" property="description" />
        </resultMap>
        <sql id="Blob_Column_List">
            description
        </sql>
        <select id="findBacteriaByID" resultMap="BacteriaResult">
            SELECT * FROM bacteria WHERE bacteria_id IN
            <foreach collection="list" index="index" item="item" open="(" separator="," close=")" >
                #{item}
            </foreach>
        </select>
        -->

    <!--
        <resultMap id="BaseResultMap" type="com.iaso.antibiotic.model.Situation">
            <id column="relation_id" jdbcType="VARCHAR" property="relationId" />
            <result column="relation_name" jdbcType="VARCHAR" property="relationName" />
            <result column="relation_type" jdbcType="VARCHAR" property="relationType" />
            <result column="source_type" jdbcType="VARCHAR" property="sourceType" />
            <result column="target_type" jdbcType="VARCHAR" property="targetType" />
        </resultMap>
        -->

    <!--<resultMap id="SituationResult" type="com.iaso.antibiotic.model.Situation">
        <id column="situation_id" jdbcType="VARCHAR" property="situationId" />
        <result column="situation_name" jdbcType="VARCHAR" property="situationName" />
    </resultMap>-->


</mapper>